snippet     #!
abbr        #!/usr/bin/env python3
alias       shebang
options     head
	#!/usr/bin/env python3
	${0}

snippet     class
abbr        class Class(...): ...
options     head
	class ${1:#:name}(${2:object}):
		def __init__(self${3}) -> None:
      super().__init__(${4})
			${0:TARGET}

snippet     def
abbr        def function(...): ...
options     head
	def ${1:#:name}(${2}) -> ${3:None}:
		${0:TARGET}

snippet     method
abbr        def method(self, ...): ...
options     head
	def ${1:#:name}(self, ${2}) -> ${3:None}:
		${0:TARGET}

snippet     open
options     head
	with open(${1:#:file}, '${2:r}') as ${3:f}:
		${0:TARGET}

snippet     for
abbr        for ... in ...: ...
options     head
	for ${1:#:value} in ${2:#:list}:
		${0:TARGET}

snippet     if
abbr        if ...: ...
options     head
	if ${1:#:condition}:
		${0:TARGET}

snippet     ifmain
abbr        if __name__ == '__main__': ...
alias       main
options     head
	if __name__ == '__main__':
		${0}

snippet     try
abbr        try: ... except ...: ...
options     head
	try:
		${1}
	except ${2:#:ExceptionClass}:
		${0:TARGET}

snippet     while
abbr        while ...: ...
options     head
	while ${1:#:condition}:
		${0:TARGET}

snippet     with
abbr        with {func}({file}) as :
options     head
	with ${1} as ${2:f}:
		${0:TARGET}

snippet     map
abbr        [x for x in {list} if {condition}]
	[$1 for ${1:x} in ${2:#:list} if ${3:#:condition}]${0:TARGET}

snippet     getattr
abbr        getattr(..., ...)
options     word
	getattr(${1:#:obj}, ${2:#:attr})${0:TARGET}

snippet     setattr
abbr        setattr(..., ...)
	setattr(${1:#:obj}, ${2:#:attr}, ${3:#:value})${0:TARGET}

snippet     hasattr
abbr        hasattr(..., ...)
options     word
	hasattr(${1:#:obj}, ${2:#:attr})${0:TARGET}

snippet     vim
abbr        vim:set ...
options     head
	# vim:set fenc=utf-8 ff=unix expandtab sw=4 ts=4 sts=4${0}

snippet     init
abbr        initialize with template
options     head
	#!/usr/bin/env python3


	def main() -> None:
		${0:TARGET}


	if __name__ == '__main__':
		main()
