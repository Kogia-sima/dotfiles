# functions

snippet     fn
abbr        fn () {}
alias       func
    fn ${1:#:func_name}(${2:#:args}) {
        ${0:TARGET}
    }

snippet     fn2
abbr        fn () {}
    fn ${1:#:func_name}(${2:#:args}) -> ${3:#:()} {
        ${0:TARGET}
    }

# snippet     test
# options     head
#     #[test]
#     fn ${1:#:test_function_name}() {
#         ${0:TARGET}
#     }

snippet     pubnew
abbr        pub fn new() {}
options     head
    pub fn new(${1}) -> ${2:#:Name} {
        ${0:TARGET}
    }

snippet     impl
options     head
    impl ${1} {
        ${0:TARGET}
    }

snippet     implfor
options     head
    impl ${1} for ${2} {
        ${0:TARGET}
    }

snippet     trait
    trait ${1} {
        ${0:TARGET}
    }

# macros

snippet     macro
    macro_rules! ${1:#:macro_name} {
        (${2:#:input}) => {
            ${0:TARGET}
        };
    }

snippet     pln
abbr        println!
    println!(${1:"\{\}"}, ${0:TARGET});

snippet     fm
abbr        format!
    format!("${1:\{\}}", ${0:TARGET});

# attributes

snippet     ec
abbr        extern crate
    extern crate ${0:TARGET};
    
snippet     derive
options     head
    #[derive(${1})]${2}

# statements

snippet     mod
    mod ${1:#:mod_name} {
        ${0:TARGET}
    }

snippet     let
    let ${1:var} = ${0:TARGET};

snippet     if
abbr        if {}
    if ${1:#:condition} {
        ${0:TARGET}
    }

snippet else
    else {
        ${0:TARGET}
    }

snippet elseif
    } else if (${1:#:condition}) {
        ${0:TARGET}
    }

snippet     ifelse
abbr        if () {} else {}
    if ${1:#:condition} {
        ${2:TARGET}
    } else {
        ${3}
    }

snippet     forin
alias       for
abbr        forin  {}
    for ${1} in ${2} {
        ${0:TARGET}
    }

snippet     match
alias       switch
    match ${1:TARGET} {
        ${2:#:pattern} => ${3:#expr},${4}
    }

snippet     case
    ${1:TARGET} => ${2:#expr},${3}

# data

snippet     struct
    struct ${1} {
        ${0:TARGET}
    }

snippet     enum
    enum ${1} {
        ${0:TARGET}
    }

snippet     opt
abbr        Option<A>
    Option<${1:()}>${2}

snippet     res
abbr        Result<A, B>
    Result<${1:#:~str}, ${2:#:()}>${3}

snippet     display
abbr        impl std::fmt::Display for T
options     head
    impl fmt::Display for ${1:T} {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            ${0:TARGET}
        }    
    }

snippet     default
abbr        impl Default
options     head
    impl Default for ${1:T} {
        fn default() -> Self {
            Self {${0:TARGET}}
        }
    }

snippet     tests
abbr        mod tests
options     head
    #[cfg(test)]
    mod tests {
        use super::*;

        ${0:TARGET}
    }

snippet     test
abbr        #[test] fn
options     head
    #[test]
    fn ${1:test}() {
        ${0:TARGET}
    }
